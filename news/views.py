from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import (
    ListView,
    DetailView,
    CreateView,
    UpdateView,
    DeleteView,
)
from django.urls import reverse_lazy
from django.contrib import messages
from .models import Newspaper, Topic
from .forms import NewspaperForm, TopicForm, RedactorForm
from accounts.models import Redactor
from django.db.models import Q, Count
from django.core.paginator import Paginator
from .forms import SearchForm


# –≥–æ–ª —Å—Ç–æ—Ä—ñ–Ω–∫–∞üîª
def index(request):
    newspapers = Newspaper.objects.all()[:5]
    context = {
        "newspapers": newspapers,
        "total_newspapers": Newspaper.objects.count(),
        "total_topics": Topic.objects.count(),
        "total_redactors": Redactor.objects.count(),
    }

    return render(request, "news/index.html", context)


# –≥–∞–∑–µ—Ç–∞üîª
class NewspaperListView(ListView):
    model = Newspaper
    template_name = "news/newspaper_list.html"
    context_object_name = "newspapers"
    paginate_by = 10

    def get_queryset(self):
        queryset = Newspaper.objects.select_related("topic").prefetch_related(
            "publishers"
        )
        topic_id = self.request.GET.get("topic")
        if topic_id:
            queryset = queryset.filter(topic__id=topic_id)
        return queryset

    def context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context[topics] = Topic.objects.all()
        context["selected_topic"] = self.request.GET.get("topic")
        return context


class NewspaperDetailView(DetailView):
    model = Newspaper
    template_name = "news/newspaper_detail.html"


class NewspaperCreateView(LoginRequiredMixin, CreateView):
    model = Newspaper
    form_class = NewspaperForm
    template_name = "news/newspaper_create.html"


class NewspaperUpdateView(LoginRequiredMixin, UpdateView):
    model = Newspaper
    form_class = NewspaperForm
    template_name = "news/newspaper_update.html"


class NewspaperDeleteView(LoginRequiredMixin, DeleteView):
    model = Newspaper
    template_name = "news/newspaper_delete.html"
    success_url = reverse_lazy("news:newspaper-list")


# –¢–µ–º–∏üîª
class TopicListView(ListView):
    model = Topic
    template_name = "news/topic_list.html"


class TopicDetailView(DetailView):
    model = Topic
    template_name = "news/topic_detail.html"

    def context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["newspapers"] = self.object.newspaper.all
        return context


class TopicCreateView(LoginRequiredMixin, CreateView):
    model = Topic
    form_class = TopicForm
    template_name = "news/topic_create.html"


# —Ä–µ–¥–∞–∫—Ç–æ—Ä–∏üîª
class RedactorListView(ListView):
    model = Redactor
    template_name = "news/redactor_list.html"
    context_object_name = "redactors"
    paginate_by = 10


class RedactorCreateView(LoginRequiredMixin, CreateView):
    model = Redactor
    form_class = RedactorForm
    template_name = "news/redactor_create.html"


class RedactorDetailView(DetailView):
    model = Redactor
    template_name = "news/redactor_detail.html"
    context_object_name = "redactor"


# üîª–ø–æ—à—É–∫
def search_view(request):
    form = SearchForm(request.GET or None)
    newspapers = Newspaper.objects.filter(is_published=True)
    query = None

    if form.is_valid():
        # —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫
        query = form.cleaned_data.get("query")
        if query:
            newspapers = newspapers.filter(
                Q(title__icontains=query)
                | Q(content__icontains=query)
                | Q(excerpt__icontains=query)
                | Q(topic__name__icontains=query)
                | Q(publishers__first_name__icontains=query)
                | Q(publishers__last_name__icontains=query)
                | Q(publishers__username__icontains=query)
            ).distinct()

        # —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–º–æ—é
        topic = form.cleaned_data.get("topic")
        if topic:
            newspapers = newspapers.filter(topic=topic)

        # –∑–∞ –∞–≤—Ç–æ—Ä–æ–º
        author = form.cleaned_data.get("author")
        if author:
            newspapers = newspapers.filter(publishers=author)

        # –ø–æ –¥–∞—Ç—ñ –≤—ñ–¥
        date_from = form.cleaned_data.get("date_from")
        if date_from:
            newspapers = newspapers.filter(published_date__gte=date_from)

        # –ø–æ –¥–∞—Ç—ñ –¥–æ
        date_to = form.cleaned_data.get("date_to")
        if date_to:
            newspapers = newspapers.filter(published_date__lte=date_to)

        # –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
        priority = form.cleaned_data.get("priority")
        if priority:
            newspapers = newspapers.filter(priority=priority)

        # —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        sort_by = form.cleaned_data.get("sort_by")
        if sort_by:
            newspapers = newspapers.order_by(sort_by)
        elif query:  # —è–∫—â–æ —î –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç, —Å–æ—Ä—Ç—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω—å–æ–≥–æ
            newspapers = newspapers.order_by("-published_date")
        else:
            newspapers = newspapers.order_by("-published_date")

    # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
    paginator = Paginator(
        newspapers.select_related("topic").prefetch_related("publishers"), 12
    )
    page = request.GET.get("page")
    newspapers_page = paginator.get_page(page)

    context = {
        "form": form,
        "newspapers": newspapers_page,
        "query": query,
        "total_results": newspapers.count(),
        "page_obj": newspapers_page,
        "is_paginated": newspapers_page.has_other_pages(),
    }

    return render(request, "news/search_results.html", context)


# AJAX (–ø—ñ–¥–∫–∞–∑–∫–∏, –∫–æ–ª–∏ —é–∑–µ—Ä –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç)
from django.http import JsonResponse


def search_autocomplete(request):
    query = request.GET.get("q", "")
    if len(query) < 2:
        return JsonResponse({"suggestions": []})

    # –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    newspapers = Newspaper.objects.filter(title__icontains=query, is_published=True)[:5]

    # –ø–æ —Ç–µ–º–∞—Ö
    topics = Topic.objects.filter(name__icontains=query, is_active=True)[:3]

    # –ø–æ –∞–≤—Ç–æ—Ä–∞—Ö
    authors = Redactor.objects.filter(
        Q(first_name__icontains=query)
        | Q(last_name__icontains=query)
        | Q(username__icontains=query),
        is_active_redactor=True,
    )[:3]

    suggestions = []

    # –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏
    for newspaper in newspapers:
        suggestions.append(
            {
                "type": "newspaper",
                "title": newspaper.title,
                "url": newspaper.get_absolute_url(),
                "icon": "newspaper",
            }
        )

    # –¥–æ–¥–∞—î–º–æ —Ç–µ–º–∏
    for topic in topics:
        suggestions.append(
            {
                "type": "topic",
                "title": f"–¢–µ–º–∞: {topic.name}",
                "url": topic.get_absolute_url(),
                "icon": "tag",
            }
        )

    # –¥–æ–¥–∞—é –∞–≤—Ç–æ—Ä—ñ–≤
    for author in authors:
        suggestions.append(
            {
                "type": "author",
                "title": f"–ê–≤—Ç–æ—Ä: {author.full_name or author.username}",
                "url": reverse("news:redactor-detail", kwargs={"pk": author.pk}),
                "icon": "user",
            }
        )

    return JsonResponse({"suggestions": suggestions})
